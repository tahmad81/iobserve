@model iobserve_Azure.Models.DashboardModel

@{
    ViewBag.Title = "Dashboard";
}

<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>


@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "form", id = "form" }))
{

    <table style="width:100%; margin-top:0px">
        <tr style="background-color:black">
            <td colspan="3">
                <div style="font-family:Arial; padding:8px;  font-weight:bold; color:white">
                    iobserve
                </div>
            </td>
        </tr>
        <tr>
            <td colspan="3">
                <div style="width:100%; height:50px; padding-left:15px;   margin-top:5px; padding-right:15px;background-color:lightblue; border-radius:3px">
                    <div style="-webkit-transform:translateY(50%)">
                        @Html.RadioButtonFor(m => m.Duration, 5)<label>Previous Month</label>

                        @Html.RadioButtonFor(m => m.Duration, 4)<label>Previous Week</label>
                        @Html.RadioButtonFor(m => m.Duration, 3, new { @id = "rdcm" })<label>Current Month</label>
                        @Html.RadioButtonFor(m => m.Duration, 2, new { @id = 1 })<label>Current Week</label>
                        @Html.RadioButtonFor(m => m.Duration, 1, new { @id = 2 })<label style="margin-right:20px">Date Range</label>

                        <label>Start Date</label>
                        @Html.Kendo().DatePickerFor(m => m.StartDate).Enable(Model.Duration == 1).HtmlAttributes(new { @id = "dtFrom" })
                        <label>End Date</label>
                        @Html.Kendo().DatePickerFor(m => m.Enddate).Enable(Model.Duration == 1).HtmlAttributes(new { @id = "dtTo" })
                        <input type="submit" value="Load" style="width:90px;vertical-align:middle" />
                    </div>

                </div>
            </td>
        </tr>

        <tr>

            <td>
                <div class="ChartArea">
                    @(Html.Kendo().Chart<iobserve_Azure.Models.RiskLevel>()
                    .Name("riskLevel").HtmlAttributes(new { @class = "Chart" })
                .Title(title => title
                .Color("White")
                .Text("Risk Level")
                )
                .DataSource(ds =>
                ds.Read(read => read.Action("_RiskLevelData", "Home")))
                .Series(series =>
                {
                    series.Column(model => model.Hazard_Count).Name("Hazard").Color("red").Stack("group1");
                    series.Column(model => model.Behv_Count).Name("Risky").Color("orange").Stack("group1");
                    series.Column(model => model.GoodJob_Count).Name("Good Job").Color("green").Stack("group1");
                })
                .CategoryAxis(category => category
                .Categories(model =>
                model.Risk_Level

                )



                .Color("black")
                .MajorGridLines(mlines => mlines
                .Color("gray")
                )
                )
                .Events(events => events
    .SeriesClick("SeriesClick")

                )
                .ValueAxis(value => value
                .Numeric().Color("black")
                .MajorGridLines(minor => minor
                .Visible(true)
                ))
                .Legend(legend => legend
                .Color("black")
                .Position(Kendo.Mvc.UI.ChartLegendPosition.Bottom)
                )
                .Title(title => title
                .Color("black")
                .Text("Observations by risk level")
                )
                .Tooltip(tooltip => tooltip
                .Visible(true)
                .Format("{0:N0}")
                .Color("black")
                ))

                </div>
            </td>
            <td>
                <div class="ChartArea">

                    @(Html.Kendo().Chart<iobserve_Azure.Models.StatusModel>()
                                .Name("chart").HtmlAttributes(new { @class = "Chart" })

                    .Legend(legend =>
                        {
                            legend.Position(Kendo.Mvc.UI.ChartLegendPosition.Bottom);
                            legend.Color("black");
                        })
                                     .DataSource(ds => ds.Read(read => read.Action("_StatusData", "Home")))
             .Series(series =>
             {
                 series.Pie(model => model.Percent_Value, model => model.Status)
                 .Labels(labels => labels
                .Color("black")
                .Background("Transparent")
                     .Visible(true)
                 .Template("#= kendo.format('{0:P}', percentage)#"));
             })
            .Tooltip(tooltip => tooltip
            .Visible(true)
            .Format("{0:N0}")
            .Color("black")
          )
          .Title(title => title
          .Color("black")
          .Text("Status")

          )
          .Events(events =>
events.SeriesClick("StatusPieClick")

          )

                    )
                </div>


            </td>

            <td>
                <div class="ChartArea">
                    @(Html.Kendo().Chart<iobserve_Azure.Models.StatusModel>()
                                .Name("chartobvtypes").HtmlAttributes(new { @class = "Chart" })

                    .Legend(legend =>
                        {
                            legend.Position(Kendo.Mvc.UI.ChartLegendPosition.Bottom);
                            legend.Color("black");
                        })
                             .DataSource(ds => ds.Read(read => read.Action("_StatusDataPercentage", "Home")))
             .Series(series =>
             {
                 series.Pie(model => model.Percent_Value, model => model.Status)
                 .Labels(labels => labels
                .Color("black")
                .Background("Transparent")
                     .Visible(true)
                 .Template("#= kendo.format('{0:P}', percentage)#"));
             })
            .Tooltip(tooltip => tooltip
            .Visible(true)
            .Format("{0:N0}")
            .Color("black")
          )
          .Title(title => title
          .Color("black")
          .Text("Observation Types")
          )
          .Events(events =>
events.SeriesClick("TypePieClick")

          )

                    )
                </div>
            </td>


        </tr>
        <tr>
            <td colspan="4">
                <table style="margin-left:5px; margin-top:5px; width:100%">
                    <tr>
                        <td style="width:50%; vertical-align:top" rowspan="2">
                            <div style="height:25px; vertical-align:middle; background-color:#5B9BD5;color:white; font-family:Arial;font-size:12px; text-align:center; font-weight:bold">
                                Observations submitted - Summary view
                            </div>
                            <div id="dvObservations">
                            </div>
                        </td>
                        <td style="width:50%; vertical-align:top">
                            <div id="dvMap" style="width:97%; position:relative; height:370px; margin-left:5px; margin-right:0px; border:1px solid black">

                            </div>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>

}

<script type="text/javascript">
    var key = 'AonlkOuuylj2aEQIvN5fkFdxQ5b9HCQBa4hV2szt_W_VYuQ5CmWvAJN4asfchqhR';
    var long, lat;
    $(document).ready(function () {




        //  $("#rdcm").prop("checked", true);
        $('input[type="radio"]').change(function () {
            var e = this;
            if (e.id == "2") {
                $('#dtFrom').data('kendoDatePicker').enable(true);
                $('#dtTo').data('kendoDatePicker').enable(true);
            }
            else {
                $('#dtFrom').data('kendoDatePicker').enable(false);
                $('#dtTo').data('kendoDatePicker').enable(false);
                debugger;
                $('#form').submit();
            }



        });

        //getMap();

    });

    function Bound() {

        debugger;
        var fRow = this.element.find('tbody tr:first');

        fRow.addClass('k-state-selected')
        if (fRow.length > 0) {
            SetLonLat();
            getMap();
            addMultipplePushpins();
        }
    }

    $.ajax({
        type: "GET",
        url: "/Home/_LoadObservationPartialView",
        contentType: "application/html;charset=utf-8",
        dataType: "html",
        success: function (evt) {
            // UnblockUI();
            //  alert("Loaded");
            //wndObject.center().open();

            var dv = $("#dvObservations");
            dv.html('');
            dv.html(evt);
            // debugger;
        },
        error: function (req, status, error) {
            //UnblockUI();
            alert("Error!Occured");
        }
    });
    function SeriesClick(e) {
        debugger;
        var name = e.series.name;
        //var item = e.dataItem.Risk_Type;
        $("#obsGrid").data("kendoGrid").dataSource.read({ category: name, dataType: "1", riskLevel: e.category, gridAction: "False" });

    }
    function StatusPieClick(e) {
        debugger;
        var name = e.series.name;
        var cat = e.category;
        //var item = e.dataItem.Risk_Type;
        $("#obsGrid").data("kendoGrid").dataSource.read({ category: cat, dataType: "2", gridAction: "False" });

    }
    function TypePieClick(e) {
        debugger;
        var name = e.series.name;
        var cat = e.category;
        //var item = e.dataItem.Risk_Type;
        $("#obsGrid").data("kendoGrid").dataSource.read({ category: cat, dataType: "3", gridAction: "False" });

    }

    var map = null;

    function getMap() {
        debugger;
        //mp = new Microsoft.maps.map($('#dvMap', { credentials: key }));
        map = new Microsoft.Maps.Map(document.getElementById('dvMap'), { credentials: key });
        loadTrafficModule();
        //
    }
    var boundingBox;
    function addMultipplePushpins() {

        //map.setView({
        //    bounds: Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(47.618594, -122.347618))});

        //map.setView({
        //    bounds: Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(47.620700, -122.347584))});

        //map.setView({
        //    bounds: Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(47.622052, -122.345869))
        //});

        //map.setView({ bounds: Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(47.618594, -122.347618), new Microsoft.Maps.Location(47.620700, -122.347584), new Microsoft.Maps.Location(47.622052, -122.345869)) });        // boundingBox = Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(47.618594, -122.347618), new Microsoft.Maps.Location(47.620700, -122.347584), new Microsoft.Maps.Location(47.622052, -122.345869))
        // map = new Microsoft.Maps.Map(document.getElementById('dvMap'), { credentials: key,bounds: boundingBox});
        // loadTrafficModule();
         debugger;
        var arr = [];

        arr.push(new Microsoft.Maps.Location(47.622052, -122.345869));
        arr.push(new Microsoft.Maps.Location(47.620700, -122.347584));
        arr.push(new Microsoft.Maps.Location(47.618594, -122.347618));
        
        map.setView({
            bounds: Microsoft.Maps.LocationRect.fromLocations(arr)
        });
        var p1 = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(47.618594, -122.347618));
        map.entities.push(p1);
        var p1 = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(47.620700, -122.347584));
        map.entities.push(p1);
        var p1 = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(47.622052, -122.345869));
        map.entities.push(p1);
        
    }
    function addSinglePushPin() {
        var pushpin = new Microsoft.Maps.Pushpin(map.getCenter(), null);
        debugger;
        map.entities.push(pushpin);
        pushpin.setLocation(new Microsoft.Maps.Location(lat, long));
    }
    function loadTrafficModule() {
        Microsoft.Maps.loadModule('Microsoft.Maps.Traffic', { callback: trafficModuleLoaded });

    }
    function trafficModuleLoaded() {
        //setMapView();
        showTrafficLayer();
    }
    function setMapView() {
        map.setView({ zoom: 10, center: new Microsoft.Maps.Location(lat, long) })
    }
    function showTrafficLayer() {
       // setMapView();
        trafficLayer = new Microsoft.Maps.Traffic.TrafficLayer(map);
        // show the traffic Layer
        trafficLayer.show();
    }
    function SetLonLat() {
        var entityGrid = $("#obsGrid").data("kendoGrid");
        var selectedItem = entityGrid.dataItem(entityGrid.select());
        long = selectedItem.Long;
        lat = selectedItem.Lat;
    }
    function Changed(e) {
        debugger;
        alert("selected");
        SetLonLat();
        getMap();
        addSinglePushPin();

    }

</script>
